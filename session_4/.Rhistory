stop()
range <- "chr1:1-20"
range
gsub(":.*","",range)
a <- gsub(":.*","",range)
b <- gsub(".*:","",range)
a
b
b
strsplit(b, "-")
unlist(strsplit(b, "-"))
as.numeric(unlist(strsplit(b, "-")))
a <- gsub(":.*","",range)
b <- gsub(".*:","",range)
region <- as.numeric(unlist(strsplit(b, "-")))
cutsite <- GRanges(a,IRanges(min(region),max(region)), "*")
a
region
input
plot (embed[,1], embed[,2], pch=20, col="blue")
Heatmap(cnts)
sigmoid
?logistic
?logit
logit
logistic()
plogis(100)
plogis(-100)
plogis(-50)
plogis(0)
library(DESeq2)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
biocLite("GenomicRanges")
library(DESeq2)
library("GenomicRanges")
library(DESeq2)
setwd("~/Desktop/R-course/session_4/")
load("session3.rdt")
dim(cnt.table.new)
dim(rpkm_m)
cnt.filter <- cnt.table.new[rowSums(rpkm_m) > 0.1,]
conds <- factor(c(rep("treatment", 4), rep("control", 2)),
levels = c("control", "treatment"))
dds <- DESeqDataSetFromMatrix(data.frame(cnt.filter), colData=data.frame(condition=conds), design=~condition)
dds
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
cnt.norm <- counts(dds, normalize=T)
source("r-course-auxillary-functions.R")
cnt.norm <- counts(dds, normalize=T)
gen_PCA(cn.norm)
gen_PCA(cnt.norm)
gen_PCA
gen_PCA <- function(cnts) {
x <- prcomp(t(log(cnts)))
vars <- round(x$sdev^2/sum(x$sdev^2)*100,1)
plot(x$x[,1], x$x[,2], xlab=paste0("PC1: ",vars[1],"% variance"), ylab=paste0("PC2: ",vars[2],"% variance"))
text(x$x[,1], x$x[,2], labels = rownames(x$x), pos = 3)
}
gen_PCA(cnt.norm)
cnt.filter <- cnt.filter + 1
conds <- factor(c(rep("treatment", 4), rep("control", 2)),
levels = c("control", "treatment"))
dds <- DESeqDataSetFromMatrix(data.frame(cnt.filter), colData=data.frame(condition=conds), design=~condition)
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
cnt.norm <- counts(dds, normalize=T)
gen_PCA(cnt.norm)
dds <- estimateDispersions(dds)
dds
res <- DESeq(dds)
res
res <- results(res)
res
?DESeq
dds <- DESeqDataSetFromMatrix(data.frame(cnt.filter), colData=data.frame(condition=conds), design=~condition)
deseq <- DESeq(dds)
cnt.norm <- counts(deseq, normalize=T)
gen_PCA(cnt.norm)
res <- results(deseq)
res
res$padj
sum(res$padj < 0.05)
sum(res$padj < 0.05, rm.na=T)
sum(res$padj < 0.05, na.rm =T)
res[res$padj < 0.05, ]
res[res$padj < 0.05]
res[which(res$padj < 0.05, na.rm=T)]
which(res$padj < 0.05)
res[which(res$padj < 0.05)]
res[which(res$padj < 0.05),]
sum(is.na(res$padj))
res <- results(deseq, independentFiltering = F)
sum(is.na(res$padj))
res$padj
head(res)
sum(res$padj < 0.05)
head(cnt.norm)
res
res
names(res)
rownames(res)
id_map <- Mouse_Name_Converter(rownames(res))
library(biomaRt)
biocLite("biomaRt")
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library(biomaRt)
id_map <- Mouse_Name_Converter(rownames(res))
id_map
head(id_map)
dim(id_map)
res
id_map <- id_map[!duplicated(id_map[,2]),] # remove duplicated refseq ids from map
rownames(id_map) <- id_map[,2] # add rownames
res$symbol <- id_map[rownames(res),1] # index
res
plot_scatter(res)
deseq
deseq
deseq$cond
deseq$condition
tmp <- counts(deseq, normalize=T)
head(tmp)
deseq$condition==0
deseq$condition==1
as.numeric(deseq$condition)
deseq$condition
levels(deseq$condition)
tmp[,deseq$condition==conditions[1]]
deseq$condition
conditions <- levels(deseq$condition)
tmp[,deseq$condition==conditions[1]]
x <- log2(rowMeans(tmp[,deseq$condition==conditions[1]]))
y <- log2(rowMeans(tmp[,deseq$condition==conditions[2]]))
x
y
plot_scatter <- function(deseq, res) {
tmp <- counts(deseq, normalize=T)
conditions <- levels(deseq$condition)
x <- log2(rowMeans(tmp[,deseq$condition==conditions[1]]))
y <- log2(rowMeans(tmp[,deseq$condition==conditions[2]]))
plot(x, y, xlim=c(0,max(c(x,y))), ylim=c(0,max(c(x,y))),
pch=20, col = ifelse(res$padj< .05, "red", "black"))
abline(0,1)
}
plot_scatter(deseq, res)
cnt.norm
rownames(cnt.norm) <- nbt$symbol
rownames(cnt.norm) <- res$symbol
toplot <- cnt.norm[res$pval < 0.05 & abs(nbt$log2FoldChange) > 1 , ]
toplot <- cnt.norm[res$pval < 0.05 & abs(res$log2FoldChange) > 1 , ]
toplot
res$pvalue
toplot <- cnt.norm[res$pvalue < 0.05 & abs(res$log2FoldChange) > 1 , ]
toplot
dim(toplot)
library(pheatmap)
install.packages("pheatmap")
library(pheatmap)
pheatmap(t(scale(t(toplot))))
all_table[[1]]
source('~/Desktop/NGS.analysis/BRD/rscripts/make_figures.R')
