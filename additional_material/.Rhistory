stop()
range <- "chr1:1-20"
range
gsub(":.*","",range)
a <- gsub(":.*","",range)
b <- gsub(".*:","",range)
a
b
b
strsplit(b, "-")
unlist(strsplit(b, "-"))
as.numeric(unlist(strsplit(b, "-")))
a <- gsub(":.*","",range)
b <- gsub(".*:","",range)
region <- as.numeric(unlist(strsplit(b, "-")))
cutsite <- GRanges(a,IRanges(min(region),max(region)), "*")
a
region
input
plot (embed[,1], embed[,2], pch=20, col="blue")
Heatmap(cnts)
sigmoid
?logistic
?logit
logit
logistic()
plogis(100)
plogis(-100)
plogis(-50)
plogis(0)
library(DESeq2)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
biocLite("GenomicRanges")
library(DESeq2)
library("GenomicRanges")
21629+891+21041+21778
if (barcode %in% gsub("rdata_cycleZero/CycleZero_|.rds","",all_cycle0))  {
initial <- readDNAStringSet(paste0("data/CAP-SELEX/raw/htSELEX/", rownames(cnts)[1]), format="fastq")
} else {
cycle0 <- all_cycle0[grep(barcode,all_cycle0)]
initial <- readDNAStringSet(cycle0, format="fastq")
}
setwd("C://Users/yuanh_000/Desktop/R-course/session_34/")
setwd("C://Users/yuanh_000/Desktop/R-course/session_3/")
setwd("~/Desktop/R-course/session_3")
list.files()
setwd("C://Users/yuanh_000/Desktop/R-course/additional_material/")
list.files()
setwd("~/Desktop/R-course/additional_material/")
list.files()
cnt.table <- read.table(file = "rcourse_countTable.txt",
header=T, stringsAsFactors = F)
cnt.table[1:5,]
rownames(cnt.table) <- cnt.table[,1]
cnt.table <- cnt.table[,-1]
cnt.table
library(GenomicRanges)
library(DESeq2)
refseq <- read.table("mm9.gtf", stringsAsFactors = F)
dim(refseq)
class(refseq)
refseq.gr <- GRanges(seqnames = refseq$V1,
ranges = IRanges(refseq$V4, refseq$V5),
strand = refseq$V7,
mcols = data.frame(type=refseq$V3, transcript_id=refseq$V13, stringsAsFactors = F)
)
exons <- refseq.gr[refseq.gr$mcols.type=="exon"]
transcript_width <- tapply(X = width(exons), INDEX = exons$mcols.transcript_id, sum)
length(transcript_width)
dim(cnt.table)
ovlp_genes <- intersect(rownames(cnt.table), names(transcript_width))
cnt.table.new <- cnt.table[ovlp_genes, ]
transcript_width_new <- transcript_width[ovlp_genes]
get_rpkm <- function(exp, gene_size, coverage) {
rpkm <- exp/gene_size * 1000 / coverage * 10^6
return (rpkm)
}
covs <- colSums(cnt.table)
rpkm_m <- matrix( , nrow(cnt.table.new), ncol(cnt.table.new))
for (i in 1:ncol(cnt.table.new) ){
tmp <- cnt.table.new[,i]
rpkm_m[,i] <- get_rpkm(tmp, transcript_width_new, covs[i])
}
draw_diamond <- function(rna.data, atac.data, max.gene.dist=50000, genes=NULL, top.n=NULL) {
# inspired by Yuri's code for drawing diamond
# @rna.data requires column: gene, log2FC, padj
# @atac.data requires column: gene, gene.dist, log2FC, padj
# @either genes or top.n need to be specified
# data preparation
rna.data <- rna.data[rna.data$gene %in% atac.data$gene,] # only consider genes with atac peak
rownames(rna.data) <- rna.data$gene
atac.data <- atac.data[atac.data$gene.dist <= max.gene.dist, ]
# plot1 is RNA-seq for selected genes
if (!is.null(genes)) {
toplot1 <- rna.data[genes, c("gene","log2FC","padj")]
toplot1 <- toplot1[order(toplot1$log2FC), ]
toplot1$rank <- 1:nrow(toplot1)
}
if (!is.null(top.n)) {
toplot1 <- rna.data[, c("gene","log2FC","padj")]
toplot1 <- toplot1[order(toplot1$log2FC), ]
toplot1 <- toplot1[c(1:top.n, (nrow(toplot1)-top.n+1):nrow(toplot1)), ]
toplot1$rank <- 1:nrow(toplot1)
}
# plot2 is ATAC
toplot2 <- atac.data[atac.data$gene %in% toplot1$gene, c("gene", "log2FC", "padj")]
toplot2$x <- toplot1[toplot2$gene,"rank"]
toplot2$y <- 0
toplot2 <- split(toplot2, toplot2$gene)
toplot2 <- lapply(toplot2, function(tmp) {
tmp <- tmp[order(tmp$log2FC), ]
y <- rep(toplot1[unique(tmp$gene), "log2FC"], nrow(tmp))
y <- y + seq(diamond.dist, diamond.dist * nrow(tmp), by = diamond.dist)
tmp$y <- y
return(tmp)
})
toplot2 <- do.call(rbind, toplot2)
# plot all
y_max <- max(abs(toplot1$log2FC))+1
p <- ggplot(toplot1,  aes(rank, log2FC, label = gene)) +
geom_text(aes(angle=90), hjust = 1) +
geom_point(data=toplot2, aes(x, y, color=log2FC)) +
scale_colour_gradient2(low="#67a9cf", mid="#f0f0f0", high="#ef8a62", midpoint = 0) +
theme_classic() +  ylim(-y_max,y_max) + xlab("") + ylab("RNA_log2FC") +
geom_hline(yintercept=0, linetype = 2)
return(p)
}
